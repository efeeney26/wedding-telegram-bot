import { config } from 'dotenv';
import { Context, Markup, Telegraf } from 'telegraf';
import { Update } from 'typegram';

import { FACTS, ACTS } from './constants';

config();

const token: string = process.env.BOT_TOKEN as string;
const WISHES_CHAT_ID: string = process.env.WISHES_CHAT_ID as string
const ACTS_CHAT_ID: string = process.env.ACTS_CHAT_ID as string

const bot: Telegraf<Context<Update>> = new Telegraf(token);

const inlineKeyboard = Markup.inlineKeyboard([
  Markup.button.callback('–ü–æ–ª—É—á–∏—Ç—å –∑–∞–±–∞–≤–Ω—ã–π —Ñ–∞–∫—Ç –æ –º–æ–ª–æ–¥–æ–∂–µ–Ω–∞—Ö', 'fact'),
  Markup.button.callback('–ü–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ', 'act'),
  Markup.button.callback('–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–∂–µ–ª–∞–Ω–∏–µ –º–æ–ª–æ–¥–æ–∂–µ–Ω–∞–º', 'wish'),
], {
  columns: 1,
});

bot.start((ctx) => {
  ctx.reply(
    `–ü—Ä–∏–≤–µ—Ç, ${ctx.from.first_name}! –°–º–æ—Ç—Ä–∏, —á—Ç–æ —è —É–º–µ—é:`,
    inlineKeyboard
  );
});

bot.action('fact', async (ctx, next) => {
  await ctx.reply(
    `üåöüåö –¢—ã —É–¥–∏–≤–∏—à—å—Å—è, –Ω–æ... ${FACTS[Math.floor(Math.random() * FACTS.length)]} üåöüåö`,
    inlineKeyboard,
  );
  next();
})

let conditionToStopEaringMessagesAct: boolean;

bot.action('act', async (ctx) => {
  conditionToStopEaringMessagesAct = false;
  await ctx.reply(`üòéüòé –î–æ–∫–∞–∂–∏, –Ω–∞—Å–∫–æ–ª—å–∫–æ —Ç—ã –∫—Ä—É—Ç. ${ACTS[Math.floor(Math.random() * ACTS.length)]} üòéüòé`);
  bot.on('message', async (ctx) => {
    if (!conditionToStopEaringMessagesAct) {
      await ctx.telegram.sendCopy(ACTS_CHAT_ID, ctx.message);
      await ctx.reply('–ó–∞–¥–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!', inlineKeyboard);
      conditionToStopEaringMessagesAct = true;
    }
  });
})

let conditionToStopEaringMessagesWish: boolean;

bot.action('wish', async (ctx) => {
  conditionToStopEaringMessagesWish = false;
  await ctx.reply('–ù–∞–ø–∏—à–∏ –ø–æ–∂–µ–ª–∞–Ω–∏–µ –º–æ–ª–æ–¥–æ–∂–µ–Ω–∞–º');
  bot.on('text',  async (ctx) => {
    if (!conditionToStopEaringMessagesWish) {
        await ctx.telegram.sendMessage(WISHES_CHAT_ID, `"${ctx.message.text}" –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –æ—Ç ${ctx.from.username || '–≥–æ—Å—Ç—è'}`);
        await ctx.reply('–ü–æ–∂–µ–ª–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –º–æ–ª–æ–¥–æ–∂–µ–Ω–∞–º! –°–ø–∞—Å–∏–±–æ!', inlineKeyboard);
        conditionToStopEaringMessagesWish = true;
      }
  });
})

bot.launch();
