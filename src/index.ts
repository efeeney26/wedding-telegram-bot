import { config } from 'dotenv';
import { Context, Markup, Telegraf } from 'telegraf';
import { Update } from 'typegram';

import { FACTS, ACTS } from './constants';

config();

const token: string = process.env.BOT_TOKEN as string;

const bot: Telegraf<Context<Update>> = new Telegraf(token);

const inlineKeyboard = Markup.inlineKeyboard([
  Markup.button.callback('–ü–æ–ª—É—á–∏—Ç—å –∑–∞–±–∞–≤–Ω—ã–π —Ñ–∞–∫—Ç –æ –º–æ–ª–æ–¥–æ–∂–µ–Ω–∞—Ö', 'fact'),
  Markup.button.callback('–ü–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ', 'act'),
  Markup.button.callback('–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–∂–µ–ª–∞–Ω–∏–µ –º–æ–ª–æ–¥–æ–∂–µ–Ω–∞–º', 'wish'),
], {
  columns: 1,
});

bot.start((ctx) => {
  ctx.reply(
    `–ü—Ä–∏–≤–µ—Ç, ${ctx.from.first_name}! –°–º–æ—Ç—Ä–∏, —á—Ç–æ —è —É–º–µ—é:`,
    inlineKeyboard
  );
});

bot.action('fact', async (ctx, next) => {
  await ctx.reply(
    `–¢—ã —É–¥–∏–≤–∏—à—å—Å—è, –Ω–æ... üåöüåö ${FACTS[Math.floor(Math.random() * FACTS.length)]} üåöüåö`,
    inlineKeyboard,
  );
  next();
})

bot.action('act', async (ctx, next) => {
  await ctx.reply(
    `–î–æ–∫–∞–∂–∏, –Ω–∞—Å–∫–æ–ª—å–∫–æ —Ç—ã –∫—Ä—É—Ç. üòéüòé ${ACTS[Math.floor(Math.random() * ACTS.length)]} üòéüòé`,
    inlineKeyboard
  );
  next();
})

let conditionToStopEaringMessages: boolean;

bot.action('wish', async (ctx) => {
  conditionToStopEaringMessages = false;
  await ctx.reply('–ù–∞–ø–∏—à–∏ –ø–æ–∂–µ–ª–∞–Ω–∏–µ –º–æ–ª–æ–¥–æ–∂–µ–Ω–∞–º');
  bot.on('text', async (ctx) => {
    if (ctx.message.text && !conditionToStopEaringMessages) {
        const message = await ctx.copyMessage('-720490123', ctx.message);
        if (message) {
          await ctx.reply('–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –º–æ–ª–æ–¥–æ–∂–µ–Ω–∞–º! –°–ø–∞—Å–∏–±–æ!', inlineKeyboard);
        }
        conditionToStopEaringMessages = true;
      }
  });
})

bot.launch();
